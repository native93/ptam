/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/srv/FrontierExtractor.srv */
#ifndef PTAM_SERVICE_FRONTIEREXTRACTOR_H
#define PTAM_SERVICE_FRONTIEREXTRACTOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "geometry_msgs/PoseArray.h"
#include "geometry_msgs/PoseArray.h"
#include "geometry_msgs/PoseArray.h"

namespace ptam
{
template <class ContainerAllocator>
struct FrontierExtractorRequest_ {
  typedef FrontierExtractorRequest_<ContainerAllocator> Type;

  FrontierExtractorRequest_()
  {
  }

  FrontierExtractorRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::FrontierExtractorRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FrontierExtractorRequest
typedef  ::ptam::FrontierExtractorRequest_<std::allocator<void> > FrontierExtractorRequest;

typedef boost::shared_ptr< ::ptam::FrontierExtractorRequest> FrontierExtractorRequestPtr;
typedef boost::shared_ptr< ::ptam::FrontierExtractorRequest const> FrontierExtractorRequestConstPtr;


template <class ContainerAllocator>
struct FrontierExtractorResponse_ {
  typedef FrontierExtractorResponse_<ContainerAllocator> Type;

  FrontierExtractorResponse_()
  : ugv_frontiers()
  , uav_frontiers()
  , passive_uav_frontiers()
  {
  }

  FrontierExtractorResponse_(const ContainerAllocator& _alloc)
  : ugv_frontiers(_alloc)
  , uav_frontiers(_alloc)
  , passive_uav_frontiers(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _ugv_frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  ugv_frontiers;

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _uav_frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  uav_frontiers;

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _passive_uav_frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  passive_uav_frontiers;


  typedef boost::shared_ptr< ::ptam::FrontierExtractorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::FrontierExtractorResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FrontierExtractorResponse
typedef  ::ptam::FrontierExtractorResponse_<std::allocator<void> > FrontierExtractorResponse;

typedef boost::shared_ptr< ::ptam::FrontierExtractorResponse> FrontierExtractorResponsePtr;
typedef boost::shared_ptr< ::ptam::FrontierExtractorResponse const> FrontierExtractorResponseConstPtr;

struct FrontierExtractor
{

typedef FrontierExtractorRequest Request;
typedef FrontierExtractorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FrontierExtractor
} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::FrontierExtractorRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ptam::FrontierExtractorRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/FrontierExtractorRequest";
  }

  static const char* value(const  ::ptam::FrontierExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ptam::FrontierExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::FrontierExtractorRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::FrontierExtractorResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::FrontierExtractorResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::FrontierExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d9ac009080ac5dccf76d53c837f311b";
  }

  static const char* value(const  ::ptam::FrontierExtractorResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3d9ac009080ac5dcULL;
  static const uint64_t static_value2 = 0xcf76d53c837f311bULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::FrontierExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/FrontierExtractorResponse";
  }

  static const char* value(const  ::ptam::FrontierExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::FrontierExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseArray ugv_frontiers\n\
geometry_msgs/PoseArray uav_frontiers\n\
geometry_msgs/PoseArray passive_uav_frontiers\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::ptam::FrontierExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::FrontierExtractorRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FrontierExtractorRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::FrontierExtractorResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.ugv_frontiers);
    stream.next(m.uav_frontiers);
    stream.next(m.passive_uav_frontiers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FrontierExtractorResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptam::FrontierExtractor> {
  static const char* value() 
  {
    return "3d9ac009080ac5dccf76d53c837f311b";
  }

  static const char* value(const ptam::FrontierExtractor&) { return value(); } 
};

template<>
struct DataType<ptam::FrontierExtractor> {
  static const char* value() 
  {
    return "ptam/FrontierExtractor";
  }

  static const char* value(const ptam::FrontierExtractor&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::FrontierExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d9ac009080ac5dccf76d53c837f311b";
  }

  static const char* value(const ptam::FrontierExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::FrontierExtractorRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/FrontierExtractor";
  }

  static const char* value(const ptam::FrontierExtractorRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::FrontierExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d9ac009080ac5dccf76d53c837f311b";
  }

  static const char* value(const ptam::FrontierExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::FrontierExtractorResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/FrontierExtractor";
  }

  static const char* value(const ptam::FrontierExtractorResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTAM_SERVICE_FRONTIEREXTRACTOR_H

