/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/srv/cluster.srv */
#ifndef PTAM_SERVICE_CLUSTER_H
#define PTAM_SERVICE_CLUSTER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseArray.h"


#include "geometry_msgs/PoseArray.h"
#include "ptam/point.h"

namespace ptam
{
template <class ContainerAllocator>
struct clusterRequest_ {
  typedef clusterRequest_<ContainerAllocator> Type;

  clusterRequest_()
  : frontiers()
  , threshold(0.0)
  {
  }

  clusterRequest_(const ContainerAllocator& _alloc)
  : frontiers(_alloc)
  , threshold(0.0)
  {
  }

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  frontiers;

  typedef float _threshold_type;
  float threshold;


  typedef boost::shared_ptr< ::ptam::clusterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::clusterRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct clusterRequest
typedef  ::ptam::clusterRequest_<std::allocator<void> > clusterRequest;

typedef boost::shared_ptr< ::ptam::clusterRequest> clusterRequestPtr;
typedef boost::shared_ptr< ::ptam::clusterRequest const> clusterRequestConstPtr;


template <class ContainerAllocator>
struct clusterResponse_ {
  typedef clusterResponse_<ContainerAllocator> Type;

  clusterResponse_()
  : cluster_center()
  , clustered_frontiers()
  , point_info()
  {
  }

  clusterResponse_(const ContainerAllocator& _alloc)
  : cluster_center(_alloc)
  , clustered_frontiers(_alloc)
  , point_info(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _cluster_center_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  cluster_center;

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _clustered_frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  clustered_frontiers;

  typedef std::vector< ::ptam::point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ptam::point_<ContainerAllocator> >::other >  _point_info_type;
  std::vector< ::ptam::point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::ptam::point_<ContainerAllocator> >::other >  point_info;


  typedef boost::shared_ptr< ::ptam::clusterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::clusterResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct clusterResponse
typedef  ::ptam::clusterResponse_<std::allocator<void> > clusterResponse;

typedef boost::shared_ptr< ::ptam::clusterResponse> clusterResponsePtr;
typedef boost::shared_ptr< ::ptam::clusterResponse const> clusterResponseConstPtr;

struct cluster
{

typedef clusterRequest Request;
typedef clusterResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct cluster
} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::clusterRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::clusterRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::clusterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "87cecf8dccb5e3f76ec1cf0cf9d6e0f4";
  }

  static const char* value(const  ::ptam::clusterRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x87cecf8dccb5e3f7ULL;
  static const uint64_t static_value2 = 0x6ec1cf0cf9d6e0f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::clusterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/clusterRequest";
  }

  static const char* value(const  ::ptam::clusterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::clusterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseArray frontiers\n\
float32 threshold\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::ptam::clusterRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::clusterResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::clusterResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::clusterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a47d59a032cc97985031d3b84d64f35";
  }

  static const char* value(const  ::ptam::clusterResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a47d59a032cc979ULL;
  static const uint64_t static_value2 = 0x85031d3b84d64f35ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::clusterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/clusterResponse";
  }

  static const char* value(const  ::ptam::clusterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::clusterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] cluster_center\n\
geometry_msgs/PoseArray clustered_frontiers\n\
point[] point_info\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: ptam/point\n\
int32 c_i\n\
float32 dist\n\
\n\
";
  }

  static const char* value(const  ::ptam::clusterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::clusterRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frontiers);
    stream.next(m.threshold);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct clusterRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::clusterResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cluster_center);
    stream.next(m.clustered_frontiers);
    stream.next(m.point_info);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct clusterResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptam::cluster> {
  static const char* value() 
  {
    return "84e0be09b741237cbf3f2e85a040f8f4";
  }

  static const char* value(const ptam::cluster&) { return value(); } 
};

template<>
struct DataType<ptam::cluster> {
  static const char* value() 
  {
    return "ptam/cluster";
  }

  static const char* value(const ptam::cluster&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::clusterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84e0be09b741237cbf3f2e85a040f8f4";
  }

  static const char* value(const ptam::clusterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::clusterRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/cluster";
  }

  static const char* value(const ptam::clusterRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::clusterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "84e0be09b741237cbf3f2e85a040f8f4";
  }

  static const char* value(const ptam::clusterResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::clusterResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/cluster";
  }

  static const char* value(const ptam::clusterResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTAM_SERVICE_CLUSTER_H

