/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/srv/Frontier_check.srv */
#ifndef PTAM_SERVICE_FRONTIER_CHECK_H
#define PTAM_SERVICE_FRONTIER_CHECK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "geometry_msgs/PoseArray.h"



namespace ptam
{
template <class ContainerAllocator>
struct Frontier_checkRequest_ {
  typedef Frontier_checkRequest_<ContainerAllocator> Type;

  Frontier_checkRequest_()
  : Frontiers()
  {
  }

  Frontier_checkRequest_(const ContainerAllocator& _alloc)
  : Frontiers(_alloc)
  {
  }

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _Frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  Frontiers;


  typedef boost::shared_ptr< ::ptam::Frontier_checkRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::Frontier_checkRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Frontier_checkRequest
typedef  ::ptam::Frontier_checkRequest_<std::allocator<void> > Frontier_checkRequest;

typedef boost::shared_ptr< ::ptam::Frontier_checkRequest> Frontier_checkRequestPtr;
typedef boost::shared_ptr< ::ptam::Frontier_checkRequest const> Frontier_checkRequestConstPtr;


template <class ContainerAllocator>
struct Frontier_checkResponse_ {
  typedef Frontier_checkResponse_<ContainerAllocator> Type;

  Frontier_checkResponse_()
  : total_points(0)
  , points_visible()
  {
  }

  Frontier_checkResponse_(const ContainerAllocator& _alloc)
  : total_points(0)
  , points_visible(_alloc)
  {
  }

  typedef int32_t _total_points_type;
  int32_t total_points;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _points_visible_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  points_visible;


  typedef boost::shared_ptr< ::ptam::Frontier_checkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::Frontier_checkResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Frontier_checkResponse
typedef  ::ptam::Frontier_checkResponse_<std::allocator<void> > Frontier_checkResponse;

typedef boost::shared_ptr< ::ptam::Frontier_checkResponse> Frontier_checkResponsePtr;
typedef boost::shared_ptr< ::ptam::Frontier_checkResponse const> Frontier_checkResponseConstPtr;

struct Frontier_check
{

typedef Frontier_checkRequest Request;
typedef Frontier_checkResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Frontier_check
} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::Frontier_checkRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::Frontier_checkRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::Frontier_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2ca0fd14cfd1bc19aa0846261bf833bc";
  }

  static const char* value(const  ::ptam::Frontier_checkRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2ca0fd14cfd1bc19ULL;
  static const uint64_t static_value2 = 0xaa0846261bf833bcULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::Frontier_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/Frontier_checkRequest";
  }

  static const char* value(const  ::ptam::Frontier_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::Frontier_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/PoseArray Frontiers\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::ptam::Frontier_checkRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::Frontier_checkResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::Frontier_checkResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::Frontier_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6d945507f7d1f75c44f7276f5f1d4db4";
  }

  static const char* value(const  ::ptam::Frontier_checkResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6d945507f7d1f75cULL;
  static const uint64_t static_value2 = 0x44f7276f5f1d4db4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::Frontier_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/Frontier_checkResponse";
  }

  static const char* value(const  ::ptam::Frontier_checkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::Frontier_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 total_points\n\
int32[] points_visible\n\
\n\
\n\
";
  }

  static const char* value(const  ::ptam::Frontier_checkResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::Frontier_checkRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Frontiers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Frontier_checkRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::Frontier_checkResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.total_points);
    stream.next(m.points_visible);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Frontier_checkResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptam::Frontier_check> {
  static const char* value() 
  {
    return "a52d0c0173389c6c5ef2ae39380ff751";
  }

  static const char* value(const ptam::Frontier_check&) { return value(); } 
};

template<>
struct DataType<ptam::Frontier_check> {
  static const char* value() 
  {
    return "ptam/Frontier_check";
  }

  static const char* value(const ptam::Frontier_check&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::Frontier_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a52d0c0173389c6c5ef2ae39380ff751";
  }

  static const char* value(const ptam::Frontier_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::Frontier_checkRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/Frontier_check";
  }

  static const char* value(const ptam::Frontier_checkRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::Frontier_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a52d0c0173389c6c5ef2ae39380ff751";
  }

  static const char* value(const ptam::Frontier_checkResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::Frontier_checkResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/Frontier_check";
  }

  static const char* value(const ptam::Frontier_checkResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTAM_SERVICE_FRONTIER_CHECK_H

