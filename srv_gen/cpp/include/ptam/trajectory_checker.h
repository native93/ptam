/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/srv/trajectory_checker.srv */
#ifndef PTAM_SERVICE_TRAJECTORY_CHECKER_H
#define PTAM_SERVICE_TRAJECTORY_CHECKER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ptam
{
template <class ContainerAllocator>
struct trajectory_checkerRequest_ {
  typedef trajectory_checkerRequest_<ContainerAllocator> Type;

  trajectory_checkerRequest_()
  {
  }

  trajectory_checkerRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::trajectory_checkerRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct trajectory_checkerRequest
typedef  ::ptam::trajectory_checkerRequest_<std::allocator<void> > trajectory_checkerRequest;

typedef boost::shared_ptr< ::ptam::trajectory_checkerRequest> trajectory_checkerRequestPtr;
typedef boost::shared_ptr< ::ptam::trajectory_checkerRequest const> trajectory_checkerRequestConstPtr;


template <class ContainerAllocator>
struct trajectory_checkerResponse_ {
  typedef trajectory_checkerResponse_<ContainerAllocator> Type;

  trajectory_checkerResponse_()
  : points(0)
  , possible(false)
  {
  }

  trajectory_checkerResponse_(const ContainerAllocator& _alloc)
  : points(0)
  , possible(false)
  {
  }

  typedef int32_t _points_type;
  int32_t points;

  typedef uint8_t _possible_type;
  uint8_t possible;


  typedef boost::shared_ptr< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::trajectory_checkerResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct trajectory_checkerResponse
typedef  ::ptam::trajectory_checkerResponse_<std::allocator<void> > trajectory_checkerResponse;

typedef boost::shared_ptr< ::ptam::trajectory_checkerResponse> trajectory_checkerResponsePtr;
typedef boost::shared_ptr< ::ptam::trajectory_checkerResponse const> trajectory_checkerResponseConstPtr;

struct trajectory_checker
{

typedef trajectory_checkerRequest Request;
typedef trajectory_checkerResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct trajectory_checker
} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::trajectory_checkerRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ptam::trajectory_checkerRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/trajectory_checkerRequest";
  }

  static const char* value(const  ::ptam::trajectory_checkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::ptam::trajectory_checkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::trajectory_checkerRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::trajectory_checkerResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9ec9792357c4b84a3c9a32c04bf74ab";
  }

  static const char* value(const  ::ptam::trajectory_checkerResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc9ec9792357c4b84ULL;
  static const uint64_t static_value2 = 0xa3c9a32c04bf74abULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/trajectory_checkerResponse";
  }

  static const char* value(const  ::ptam::trajectory_checkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 points\n\
bool possible\n\
\n\
\n\
";
  }

  static const char* value(const  ::ptam::trajectory_checkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::trajectory_checkerResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::trajectory_checkerRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct trajectory_checkerRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::trajectory_checkerResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
    stream.next(m.possible);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct trajectory_checkerResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptam::trajectory_checker> {
  static const char* value() 
  {
    return "c9ec9792357c4b84a3c9a32c04bf74ab";
  }

  static const char* value(const ptam::trajectory_checker&) { return value(); } 
};

template<>
struct DataType<ptam::trajectory_checker> {
  static const char* value() 
  {
    return "ptam/trajectory_checker";
  }

  static const char* value(const ptam::trajectory_checker&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::trajectory_checkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9ec9792357c4b84a3c9a32c04bf74ab";
  }

  static const char* value(const ptam::trajectory_checkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::trajectory_checkerRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/trajectory_checker";
  }

  static const char* value(const ptam::trajectory_checkerRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::trajectory_checkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c9ec9792357c4b84a3c9a32c04bf74ab";
  }

  static const char* value(const ptam::trajectory_checkerResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::trajectory_checkerResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/trajectory_checker";
  }

  static const char* value(const ptam::trajectory_checkerResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTAM_SERVICE_TRAJECTORY_CHECKER_H

