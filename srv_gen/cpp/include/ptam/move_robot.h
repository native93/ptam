/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/srv/move_robot.srv */
#ifndef PTAM_SERVICE_MOVE_ROBOT_H
#define PTAM_SERVICE_MOVE_ROBOT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ptam
{
template <class ContainerAllocator>
struct move_robotRequest_ {
  typedef move_robotRequest_<ContainerAllocator> Type;

  move_robotRequest_()
  : start_x(0.0)
  , start_y(0.0)
  , start_theta(0.0)
  , goal_x(0.0)
  , goal_y(0.0)
  , goal_theta(0.0)
  {
  }

  move_robotRequest_(const ContainerAllocator& _alloc)
  : start_x(0.0)
  , start_y(0.0)
  , start_theta(0.0)
  , goal_x(0.0)
  , goal_y(0.0)
  , goal_theta(0.0)
  {
  }

  typedef double _start_x_type;
  double start_x;

  typedef double _start_y_type;
  double start_y;

  typedef double _start_theta_type;
  double start_theta;

  typedef double _goal_x_type;
  double goal_x;

  typedef double _goal_y_type;
  double goal_y;

  typedef double _goal_theta_type;
  double goal_theta;


  typedef boost::shared_ptr< ::ptam::move_robotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::move_robotRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct move_robotRequest
typedef  ::ptam::move_robotRequest_<std::allocator<void> > move_robotRequest;

typedef boost::shared_ptr< ::ptam::move_robotRequest> move_robotRequestPtr;
typedef boost::shared_ptr< ::ptam::move_robotRequest const> move_robotRequestConstPtr;


template <class ContainerAllocator>
struct move_robotResponse_ {
  typedef move_robotResponse_<ContainerAllocator> Type;

  move_robotResponse_()
  {
  }

  move_robotResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ptam::move_robotResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::move_robotResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct move_robotResponse
typedef  ::ptam::move_robotResponse_<std::allocator<void> > move_robotResponse;

typedef boost::shared_ptr< ::ptam::move_robotResponse> move_robotResponsePtr;
typedef boost::shared_ptr< ::ptam::move_robotResponse const> move_robotResponseConstPtr;

struct move_robot
{

typedef move_robotRequest Request;
typedef move_robotResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct move_robot
} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::move_robotRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::move_robotRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::move_robotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "533042a64ee768c9dd424ef588119ef4";
  }

  static const char* value(const  ::ptam::move_robotRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x533042a64ee768c9ULL;
  static const uint64_t static_value2 = 0xdd424ef588119ef4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::move_robotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/move_robotRequest";
  }

  static const char* value(const  ::ptam::move_robotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::move_robotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 start_x\n\
float64 start_y\n\
float64 start_theta\n\
float64 goal_x\n\
float64 goal_y\n\
float64 goal_theta\n\
\n\
";
  }

  static const char* value(const  ::ptam::move_robotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::move_robotRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::move_robotResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::move_robotResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::move_robotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ptam::move_robotResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::move_robotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/move_robotResponse";
  }

  static const char* value(const  ::ptam::move_robotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::move_robotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ptam::move_robotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::move_robotResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::move_robotRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.start_x);
    stream.next(m.start_y);
    stream.next(m.start_theta);
    stream.next(m.goal_x);
    stream.next(m.goal_y);
    stream.next(m.goal_theta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct move_robotRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::move_robotResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct move_robotResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ptam::move_robot> {
  static const char* value() 
  {
    return "533042a64ee768c9dd424ef588119ef4";
  }

  static const char* value(const ptam::move_robot&) { return value(); } 
};

template<>
struct DataType<ptam::move_robot> {
  static const char* value() 
  {
    return "ptam/move_robot";
  }

  static const char* value(const ptam::move_robot&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::move_robotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "533042a64ee768c9dd424ef588119ef4";
  }

  static const char* value(const ptam::move_robotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::move_robotRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/move_robot";
  }

  static const char* value(const ptam::move_robotRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ptam::move_robotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "533042a64ee768c9dd424ef588119ef4";
  }

  static const char* value(const ptam::move_robotResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ptam::move_robotResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/move_robot";
  }

  static const char* value(const ptam::move_robotResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // PTAM_SERVICE_MOVE_ROBOT_H

