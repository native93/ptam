// -*- c++ *--
// Copyright 2008 Isis Innovation Limited
//
// VideoSource.h
// Declares the VideoSource class
// 
// This is a very simple class to provide video input; this can be
// replaced with whatever form of video input that is needed.  It
// should open the video input on construction, and provide two
// function calls after construction: Size() must return the video
// format as an ImageRef, and GetAndFillFrameBWandRGB should wait for
// a new frame and then overwrite the passed-as-reference images with
// GreyScale and Colour versions of the new frame.
//
#include <cvd/image.h>
#include <cvd/byte.h>
#include <cvd/rgb.h>
#include <message_filters/subscriber.h>
#include <message_filters/time_synchronizer.h>
#include "ardrone_autonomy/navdata_altitude.h"
#include <ros/ros.h>
#include<iostream>
#include<fstream>
#include <geometry_msgs/Pose.h>
#include "cvd/image_io.h"
#include <sensor_msgs/Image.h>
#include <image_transport/image_transport.h>
#include <message_filters/synchronizer.h>
#include <message_filters/sync_policies/approximate_time.h>
#include "ardrone_autonomy/Navdata.h"
#include <image_transport/subscriber_filter.h>
#include <nav_msgs/Odometry.h>
struct VideoSourceData;

class VideoSource
{
    public:

float pos_fkf,pos_skf;
bool fkf_select,skf_select;
	VideoSource(ros::NodeHandle &nh_);
	bool GetAndFillFrameBWandRGB(CVD::Image<CVD::byte> &imBW, CVD::Image<CVD::Rgb<CVD::byte> > &imRGB, float* pos_x,float* pos_y,bool* first_kf_ptr,bool* second_kf_ptr);
	CVD::ImageRef Size();

	void imageCallback(const sensor_msgs::ImageConstPtr& msg);

	//void odom_callback(const nav_msgs::Odometry::ConstPtr &msg);
//ros::Subscriber altitude_sub;
//void altitude_callback(const ardrone_autonomy::navdata_altitude::ConstPtr &msg);
//void callback(const ardrone_autonomy::Navdata::ConstPtr& img_msg,const ardrone_autonomy::navdata_altitude::ConstPtr &msg);
//message_filters::Subscriber<ardrone_autonomy::Navdata>nav_sub;


void callback(const sensor_msgs::ImageConstPtr& img_msg,const ardrone_autonomy::navdata_altitude::ConstPtr &msg);
void odom_callback(const sensor_msgs::ImageConstPtr &img_msg,const nav_msgs::Odometry::ConstPtr &msg);
int counter_image;

image_transport::Subscriber sub;
//image_transport::SubscriberFilter sub;


message_filters::Subscriber<nav_msgs::Odometry>odom_sub;
std::stringstream ss;
//message_filters::Subscriber<ardrone_autonomy::navdata_altitude> altitude_sub;
//typedef int what;
//Synchronizer sync;
//message_filters::Synchronizer<MySyncPolicy>sync(MySyncPolicy(200));
//sync.connectInput(sub,altitude_sub);

//message_filters::Synchronizer<MySyncPolicy>sync();

typedef message_filters::sync_policies::ApproximateTime<sensor_msgs::Image,nav_msgs::Odometry> MySyncPolicy;

	sensor_msgs::Image img;
ardrone_autonomy::navdata_altitude alti_raw;
	int ic, oc,altitude;
    private:

ros::NodeHandle nh;
image_transport::ImageTransport it_;
bool is_frame_available;
	
	ros::Time odom_stamp,image_stamp;
double time_sec;
//	ros::Subscriber odom_sub;
	geometry_msgs::Pose odom_pose;   
//	image_transport::Subscriber sub;
	CVD::ImageRef mirSize;
};


