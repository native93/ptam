"""autogenerated by genpy from ptam/FrontierExtractorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FrontierExtractorRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "ptam/FrontierExtractorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FrontierExtractorRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from ptam/FrontierExtractorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FrontierExtractorResponse(genpy.Message):
  _md5sum = "3d9ac009080ac5dccf76d53c837f311b"
  _type = "ptam/FrontierExtractorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseArray ugv_frontiers
geometry_msgs/PoseArray uav_frontiers
geometry_msgs/PoseArray passive_uav_frontiers


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['ugv_frontiers','uav_frontiers','passive_uav_frontiers']
  _slot_types = ['geometry_msgs/PoseArray','geometry_msgs/PoseArray','geometry_msgs/PoseArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ugv_frontiers,uav_frontiers,passive_uav_frontiers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FrontierExtractorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ugv_frontiers is None:
        self.ugv_frontiers = geometry_msgs.msg.PoseArray()
      if self.uav_frontiers is None:
        self.uav_frontiers = geometry_msgs.msg.PoseArray()
      if self.passive_uav_frontiers is None:
        self.passive_uav_frontiers = geometry_msgs.msg.PoseArray()
    else:
      self.ugv_frontiers = geometry_msgs.msg.PoseArray()
      self.uav_frontiers = geometry_msgs.msg.PoseArray()
      self.passive_uav_frontiers = geometry_msgs.msg.PoseArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.ugv_frontiers.header.seq, _x.ugv_frontiers.header.stamp.secs, _x.ugv_frontiers.header.stamp.nsecs))
      _x = self.ugv_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ugv_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ugv_frontiers.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.uav_frontiers.header.seq, _x.uav_frontiers.header.stamp.secs, _x.uav_frontiers.header.stamp.nsecs))
      _x = self.uav_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.uav_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.uav_frontiers.poses:
        _v3 = val1.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.orientation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.passive_uav_frontiers.header.seq, _x.passive_uav_frontiers.header.stamp.secs, _x.passive_uav_frontiers.header.stamp.nsecs))
      _x = self.passive_uav_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.passive_uav_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.passive_uav_frontiers.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ugv_frontiers is None:
        self.ugv_frontiers = geometry_msgs.msg.PoseArray()
      if self.uav_frontiers is None:
        self.uav_frontiers = geometry_msgs.msg.PoseArray()
      if self.passive_uav_frontiers is None:
        self.passive_uav_frontiers = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.ugv_frontiers.header.seq, _x.ugv_frontiers.header.stamp.secs, _x.ugv_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ugv_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ugv_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ugv_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ugv_frontiers.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.uav_frontiers.header.seq, _x.uav_frontiers.header.stamp.secs, _x.uav_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.uav_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uav_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v9 = val1.position
        _x = _v9
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v10 = val1.orientation
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.uav_frontiers.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.passive_uav_frontiers.header.seq, _x.passive_uav_frontiers.header.stamp.secs, _x.passive_uav_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.passive_uav_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.passive_uav_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.passive_uav_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v11 = val1.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = val1.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.passive_uav_frontiers.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.ugv_frontiers.header.seq, _x.ugv_frontiers.header.stamp.secs, _x.ugv_frontiers.header.stamp.nsecs))
      _x = self.ugv_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ugv_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ugv_frontiers.poses:
        _v13 = val1.position
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = val1.orientation
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.uav_frontiers.header.seq, _x.uav_frontiers.header.stamp.secs, _x.uav_frontiers.header.stamp.nsecs))
      _x = self.uav_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.uav_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.uav_frontiers.poses:
        _v15 = val1.position
        _x = _v15
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v16 = val1.orientation
        _x = _v16
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.passive_uav_frontiers.header.seq, _x.passive_uav_frontiers.header.stamp.secs, _x.passive_uav_frontiers.header.stamp.nsecs))
      _x = self.passive_uav_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.passive_uav_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.passive_uav_frontiers.poses:
        _v17 = val1.position
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = val1.orientation
        _x = _v18
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ugv_frontiers is None:
        self.ugv_frontiers = geometry_msgs.msg.PoseArray()
      if self.uav_frontiers is None:
        self.uav_frontiers = geometry_msgs.msg.PoseArray()
      if self.passive_uav_frontiers is None:
        self.passive_uav_frontiers = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.ugv_frontiers.header.seq, _x.ugv_frontiers.header.stamp.secs, _x.ugv_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ugv_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ugv_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ugv_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v19 = val1.position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v20 = val1.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ugv_frontiers.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.uav_frontiers.header.seq, _x.uav_frontiers.header.stamp.secs, _x.uav_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.uav_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.uav_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v21 = val1.position
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v22 = val1.orientation
        _x = _v22
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.uav_frontiers.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.passive_uav_frontiers.header.seq, _x.passive_uav_frontiers.header.stamp.secs, _x.passive_uav_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.passive_uav_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.passive_uav_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.passive_uav_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v23 = val1.position
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v24 = val1.orientation
        _x = _v24
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.passive_uav_frontiers.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
class FrontierExtractor(object):
  _type          = 'ptam/FrontierExtractor'
  _md5sum = '3d9ac009080ac5dccf76d53c837f311b'
  _request_class  = FrontierExtractorRequest
  _response_class = FrontierExtractorResponse
