"""autogenerated by genpy from ptam/clusterRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class clusterRequest(genpy.Message):
  _md5sum = "87cecf8dccb5e3f76ec1cf0cf9d6e0f4"
  _type = "ptam/clusterRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseArray frontiers
float32 threshold

================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['frontiers','threshold']
  _slot_types = ['geometry_msgs/PoseArray','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frontiers,threshold

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(clusterRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frontiers is None:
        self.frontiers = geometry_msgs.msg.PoseArray()
      if self.threshold is None:
        self.threshold = 0.
    else:
      self.frontiers = geometry_msgs.msg.PoseArray()
      self.threshold = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.frontiers.header.seq, _x.frontiers.header.stamp.secs, _x.frontiers.header.stamp.nsecs))
      _x = self.frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.frontiers.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_f.pack(self.threshold))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.frontiers is None:
        self.frontiers = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.frontiers.header.seq, _x.frontiers.header.stamp.secs, _x.frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v3 = val1.position
        _x = _v3
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v4 = val1.orientation
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.frontiers.poses.append(val1)
      start = end
      end += 4
      (self.threshold,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.frontiers.header.seq, _x.frontiers.header.stamp.secs, _x.frontiers.header.stamp.nsecs))
      _x = self.frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.frontiers.poses:
        _v5 = val1.position
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.orientation
        _x = _v6
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_f.pack(self.threshold))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.frontiers is None:
        self.frontiers = geometry_msgs.msg.PoseArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.frontiers.header.seq, _x.frontiers.header.stamp.secs, _x.frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v7 = val1.position
        _x = _v7
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v8 = val1.orientation
        _x = _v8
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.frontiers.poses.append(val1)
      start = end
      end += 4
      (self.threshold,) = _struct_f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_f = struct.Struct("<f")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from ptam/clusterResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ptam.msg
import geometry_msgs.msg
import std_msgs.msg

class clusterResponse(genpy.Message):
  _md5sum = "3a47d59a032cc97985031d3b84d64f35"
  _type = "ptam/clusterResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32[] cluster_center
geometry_msgs/PoseArray clustered_frontiers
point[] point_info


================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: ptam/point
int32 c_i
float32 dist

"""
  __slots__ = ['cluster_center','clustered_frontiers','point_info']
  _slot_types = ['int32[]','geometry_msgs/PoseArray','ptam/point[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cluster_center,clustered_frontiers,point_info

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(clusterResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cluster_center is None:
        self.cluster_center = []
      if self.clustered_frontiers is None:
        self.clustered_frontiers = geometry_msgs.msg.PoseArray()
      if self.point_info is None:
        self.point_info = []
    else:
      self.cluster_center = []
      self.clustered_frontiers = geometry_msgs.msg.PoseArray()
      self.point_info = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.cluster_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.cluster_center))
      _x = self
      buff.write(_struct_3I.pack(_x.clustered_frontiers.header.seq, _x.clustered_frontiers.header.stamp.secs, _x.clustered_frontiers.header.stamp.nsecs))
      _x = self.clustered_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clustered_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.clustered_frontiers.poses:
        _v9 = val1.position
        _x = _v9
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = val1.orientation
        _x = _v10
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.point_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.point_info:
        _x = val1
        buff.write(_struct_if.pack(_x.c_i, _x.dist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.clustered_frontiers is None:
        self.clustered_frontiers = geometry_msgs.msg.PoseArray()
      if self.point_info is None:
        self.point_info = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.cluster_center = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.clustered_frontiers.header.seq, _x.clustered_frontiers.header.stamp.secs, _x.clustered_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustered_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clustered_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clustered_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v11 = val1.position
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v12 = val1.orientation
        _x = _v12
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.clustered_frontiers.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.point_info = []
      for i in range(0, length):
        val1 = ptam.msg.point()
        _x = val1
        start = end
        end += 8
        (_x.c_i, _x.dist,) = _struct_if.unpack(str[start:end])
        self.point_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.cluster_center)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.cluster_center.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.clustered_frontiers.header.seq, _x.clustered_frontiers.header.stamp.secs, _x.clustered_frontiers.header.stamp.nsecs))
      _x = self.clustered_frontiers.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.clustered_frontiers.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.clustered_frontiers.poses:
        _v13 = val1.position
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = val1.orientation
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.point_info)
      buff.write(_struct_I.pack(length))
      for val1 in self.point_info:
        _x = val1
        buff.write(_struct_if.pack(_x.c_i, _x.dist))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.clustered_frontiers is None:
        self.clustered_frontiers = geometry_msgs.msg.PoseArray()
      if self.point_info is None:
        self.point_info = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.cluster_center = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 12
      (_x.clustered_frontiers.header.seq, _x.clustered_frontiers.header.stamp.secs, _x.clustered_frontiers.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.clustered_frontiers.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.clustered_frontiers.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.clustered_frontiers.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v15 = val1.position
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v16 = val1.orientation
        _x = _v16
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.clustered_frontiers.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.point_info = []
      for i in range(0, length):
        val1 = ptam.msg.point()
        _x = val1
        start = end
        end += 8
        (_x.c_i, _x.dist,) = _struct_if.unpack(str[start:end])
        self.point_info.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_if = struct.Struct("<if")
_struct_4d = struct.Struct("<4d")
_struct_3d = struct.Struct("<3d")
class cluster(object):
  _type          = 'ptam/cluster'
  _md5sum = '84e0be09b741237cbf3f2e85a040f8f4'
  _request_class  = clusterRequest
  _response_class = clusterResponse
