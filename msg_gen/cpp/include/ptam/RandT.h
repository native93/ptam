/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/msg/RandT.msg */
#ifndef PTAM_MESSAGE_RANDT_H
#define PTAM_MESSAGE_RANDT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ptam
{
template <class ContainerAllocator>
struct RandT_ {
  typedef RandT_<ContainerAllocator> Type;

  RandT_()
  : translation()
  , rotation()
  {
  }

  RandT_(const ContainerAllocator& _alloc)
  : translation(_alloc)
  , rotation(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _translation_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  translation;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rotation_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  rotation;


  typedef boost::shared_ptr< ::ptam::RandT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::RandT_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RandT
typedef  ::ptam::RandT_<std::allocator<void> > RandT;

typedef boost::shared_ptr< ::ptam::RandT> RandTPtr;
typedef boost::shared_ptr< ::ptam::RandT const> RandTConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ptam::RandT_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ptam::RandT_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::RandT_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::RandT_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::RandT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a5b80608aa0b7f5b05ca5427bd9f1fd8";
  }

  static const char* value(const  ::ptam::RandT_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa5b80608aa0b7f5bULL;
  static const uint64_t static_value2 = 0x05ca5427bd9f1fd8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::RandT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/RandT";
  }

  static const char* value(const  ::ptam::RandT_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::RandT_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32[] translation\n\
float32[] rotation\n\
\n\
";
  }

  static const char* value(const  ::ptam::RandT_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::RandT_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.translation);
    stream.next(m.rotation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RandT_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptam::RandT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ptam::RandT_<ContainerAllocator> & v) 
  {
    s << indent << "translation[]" << std::endl;
    for (size_t i = 0; i < v.translation.size(); ++i)
    {
      s << indent << "  translation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.translation[i]);
    }
    s << indent << "rotation[]" << std::endl;
    for (size_t i = 0; i < v.rotation.size(); ++i)
    {
      s << indent << "  rotation[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotation[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PTAM_MESSAGE_RANDT_H

