/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/msg/point.msg */
#ifndef PTAM_MESSAGE_POINT_H
#define PTAM_MESSAGE_POINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace ptam
{
template <class ContainerAllocator>
struct point_ {
  typedef point_<ContainerAllocator> Type;

  point_()
  : c_i(0)
  , dist(0.0)
  {
  }

  point_(const ContainerAllocator& _alloc)
  : c_i(0)
  , dist(0.0)
  {
  }

  typedef int32_t _c_i_type;
  int32_t c_i;

  typedef float _dist_type;
  float dist;


  typedef boost::shared_ptr< ::ptam::point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::point_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct point
typedef  ::ptam::point_<std::allocator<void> > point;

typedef boost::shared_ptr< ::ptam::point> pointPtr;
typedef boost::shared_ptr< ::ptam::point const> pointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ptam::point_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ptam::point_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::point_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::point_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::point_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8d908333811b10088914f4a926f9411e";
  }

  static const char* value(const  ::ptam::point_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8d908333811b1008ULL;
  static const uint64_t static_value2 = 0x8914f4a926f9411eULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::point_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/point";
  }

  static const char* value(const  ::ptam::point_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::point_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 c_i\n\
float32 dist\n\
\n\
";
  }

  static const char* value(const  ::ptam::point_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ptam::point_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::point_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.c_i);
    stream.next(m.dist);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct point_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptam::point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ptam::point_<ContainerAllocator> & v) 
  {
    s << indent << "c_i: ";
    Printer<int32_t>::stream(s, indent + "  ", v.c_i);
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PTAM_MESSAGE_POINT_H

