/* Auto-generated by genmsg_cpp for file /home/nazrul/fuerte_workspace/ptam/msg/map.msg */
#ifndef PTAM_MESSAGE_MAP_H
#define PTAM_MESSAGE_MAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/PoseArray.h"

namespace ptam
{
template <class ContainerAllocator>
struct map_ {
  typedef map_<ContainerAllocator> Type;

  map_()
  : data()
  , index(0)
  , ugv_frontiers()
  {
  }

  map_(const ContainerAllocator& _alloc)
  : data(_alloc)
  , index(0)
  , ugv_frontiers(_alloc)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _data_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  data;

  typedef int32_t _index_type;
  int32_t index;

  typedef  ::geometry_msgs::PoseArray_<ContainerAllocator>  _ugv_frontiers_type;
   ::geometry_msgs::PoseArray_<ContainerAllocator>  ugv_frontiers;


  typedef boost::shared_ptr< ::ptam::map_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptam::map_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct map
typedef  ::ptam::map_<std::allocator<void> > map;

typedef boost::shared_ptr< ::ptam::map> mapPtr;
typedef boost::shared_ptr< ::ptam::map const> mapConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::ptam::map_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::ptam::map_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace ptam

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ptam::map_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ptam::map_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ptam::map_<ContainerAllocator> > {
  static const char* value() 
  {
    return "099159506dd615aa2c4d8c1cb18e77c6";
  }

  static const char* value(const  ::ptam::map_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x099159506dd615aaULL;
  static const uint64_t static_value2 = 0x2c4d8c1cb18e77c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ptam::map_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ptam/map";
  }

  static const char* value(const  ::ptam::map_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ptam::map_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] data\n\
int32 index\n\
geometry_msgs/PoseArray ugv_frontiers\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::ptam::map_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ptam::map_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.data);
    stream.next(m.index);
    stream.next(m.ugv_frontiers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct map_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptam::map_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::ptam::map_<ContainerAllocator> & v) 
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "ugv_frontiers: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "  ", v.ugv_frontiers);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PTAM_MESSAGE_MAP_H

